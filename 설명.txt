# 로그 예쁘게 컬러링
spring.output.ansi.enabled=always


기본설정으로, Debugger탭에서 스프링을 시작한다.
장점: 화면 파랗게보이고 글자필터됨, 단점: 시작 java커맨드안보임
  "java.debug.settings.console": "internalConsole"



기본설정으로, terminal에서 스프링을 시작한다.
장점: 직접 java 커맨트확인가능, 단점: 로그 글자 찾기가 어려움
  "java.debug.settings.console": "integratedTerminal"


# 로깅수준설정
logging.level.[com.example.sjhboot]: WARN // 이라고하면 WARN 이상, WARN, ERROR를 출력한다
    // ERROR > WARN > INFO > DEBUG 순인듯?



## 롬복 추가하기
// compileOnly 'org.projectlombok:lombok'
// annotationProcessor 'org.projectlombok:lombok'

@Slf4j 어노테이션 클래스에 붙여주고,


메소드 안에서
log.debug("debugg"); // log객체 어디서 나오느거임..



  implementation 'org.springframework.boot:spring-boot-starter-freemarker'


org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer





### mybatis 설정하기
1. 필요한것들 설치
implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.0'
implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
implementation 'org.springframework.boot:spring-boot-starter-jdbc'
runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

2. Bean으로 총 세개 띄우기(sqlSession만 띄우면 먼가 버그남)
```
@Bean
public DataSource dataSource() {
  System.out.println(12314);
    DataSourceBuilder dsb = DataSourceBuilder.create();
    dsb.url("jdbc:mariadb://localhost:3306/newlec?");
    dsb.username("root");
    dsb.password("whdgus159!");
    dsb.driverClassName(Driver.class.getName());
    DataSource dataSource = dsb.build();
    return dataSource;
}
@Bean
public SqlSessionFactory sqlSessionFactory() throws Exception {
  SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean();
  sqlSessionFactoryBean.setDataSource(dataSource());
  sqlSessionFactoryBean.setConfigLocation(applicationContext.getResource("classpath:/mymy-config.xml")); //해당경로에 해당파일준비해놓기
  sqlSessionFactoryBean.setMapperLocations(applicationContext.getResources("classpath:/mapper/**/*.xml"));
  
  return sqlSessionFactoryBean.getObject();
}	

@Bean
public SqlSession sqlSession() throws Exception {
  return new SqlSessionTemplate(sqlSessionFactory());
}
```


3. Mapper.xml 만들고 Controller에서 SqlSession으로 얻어오기
@GetMapping("/useSqlMapper")
public String useSqlMapper() {

  List<Map<String, String>> mm = sqlSession.selectList("admin.test", new HashMap<>());
  System.out.println(mm);

  return "HOHO";
}